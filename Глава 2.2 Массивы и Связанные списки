Массивы и связанные списки
    Массивы
        Это элементы, которые хранятся в непрерывном блоке памяти
        Порядок элементов известен
        Ячейки обладают номером (индексом)
        Если массив заполнен, то добавить новые элементы нельзя
        Иногда в памяти требуется сохранить список элементов. 
        Предположим, вы пишете приложение для управления текущими делами. Описания задач должны храниться в виде списка в памяти.    
        Что использовать — массив или связанный список? Для начала попробуем сохранить задачи в массиве, потому что этот способ более понятен. 
        При использовании массива все задачи хранятся в памяти непрерывно (то есть рядом друг с другом).
        Элементы в связанном списке хранятся распределенно в памяти и не лежат одним блоком, как массив
        Списки лучше подходят для вставки элементов в середину.
    
    Связанные списки
        Список состоит из данных и указателя на предыдущий и следующий элемент списка.
        При использовании связанного списка элементы могут размещаться где угодно в памяти.
        В каждом элементе хранится адрес следующего элемента списка. Таким
        образом, набор произвольных адресов памяти объединяется в цепочку.

        В связанном списке элементы не хранятся рядом друг с другом, поэтому мгновенно определить
        позицию i-го элемента в памяти невозможно — нужно обратиться к перво-
        му элементу, чтобы получить адрес второго элемента, затем обратиться ко
        второму элементу для получения адреса третьего — и так далее, пока вы не
        доберетесь до i-го.

    Удаление
        В списке достаточно изменить указатель в предыдущем элементе и на следующий, после удаляемого. 
        В массиве при удалении элемента все последующие элементы нужно будет сдвинуть вверх.

    Вставка
       В списке достаточно изменить указатель на новый добавляемый элемент справа и слева. Выполняется за константное время: O(1).  
      
Сравнение
    Массивы:
        + Компактность: Помимо основных данных, массив не хранит дополнительной информации
        + Быстрый доступ по номеру: Выполняется за O(1)
        + Не фрагментирует память: не создает множество мелких элементов памяти, из за которых страдает производительность
        - Медленные операции вставки и удаления
    Связанные списки:
        + Быстрые операции вставки и удаления
        - Перерасход памяти: для хранения указателей Next и Pref используется память
        - Медленный доступ по номеру: чтобы взять элемент по номеру, нужно пройтись по всем элементам до него
        - Фрагментирует память
 
Применимость
    Массивы:
        + Критичен расход памяти
        + Частый доступ по номеру
        - Частые операции вставки и удаления
    Связанные списки:
        + Частые операции вставки и удаления
        - Критичен расход памяти
        - Частый доступ по номеру