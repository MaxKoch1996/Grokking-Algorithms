Массивы и связанные списки
    Массивы:
        + Компактность: Помимо основных данных, массив не хранит дополнительной информации
        + Быстрый доступ по номеру: Выполняется за O(1)
        + Не фрагментирует память: не создает множество мелких элементов памяти, из за которых страдает производительность
        - Медленные операции вставки и удаления
    Связанные списки:
        + Быстрые операции вставки и удаления
        - Перерасход памяти: для хранения указателей Next и Pref используется память
        - Медленный доступ по номеру: чтобы взять элемент по номеру, нужно пройтись по всем элементам до него
        - Фрагментирует память
 
Применимость
    Массивы:
        + Критичен расход памяти
        + Частый доступ по номеру
        - Частые операции вставки и удаления
    Связанные списки:
        + Частые операции вставки и удаления
        - Критичен расход памяти
        - Частый доступ по номеру

Упражнения
    2.2 Допустим, вы пишете приложение для приема заказов от посетителей
    ресторана. Приложение должно хранить список заказов. Официанты
    добавляют заказы в список, а повара читают заказы из списка и вы-
    полняют их. Заказы образуют очередь: официанты добавляют заказы
    в конец очереди, а повар берет первый заказ из очереди и начинает готовить.
    Какую структуру данных вы бы использовали для реализации этой
    очереди: массив или связанный список? (Подсказка: связанные списки
    хорошо подходят для вставки/удаления, а массивы — для произволь-
    ного доступа к элементам. Что из этого понадобится в данном случае?)

    Ответ: Связанный список, так как необходима возможность быстрого удаления элементов, а чтение их будет идти последовательно.

    2.3 Проведем мысленный эксперимент. Допустим, Facebook хранит
    список имен пользователей. Когда кто-то пытается зайти на сайт
    Facebook, система пытается найти имя пользователя. Если имя входит
    в список имен зарегистрированных пользователей, то вход разреша-
    ется. Пользователи приходят на Facebook достаточно часто, поэтому
    поиск по списку имен пользователей будет выполняться часто. Будем
    считать, что Facebook использует бинарный поиск для поиска в спи-
    ске. Бинарному поиску необходим произвольный доступ — алгоритм
    должен мгновенно обратиться к среднему элементу текущей части
    списка. Зная это обстоятельство, как бы вы реализовали список поль-
    зователей: в виде массива или в виде связанного списка?

    Ответ: Массив, так как его преимущество это быстрый доступ к необходимому произвольному элементу

    2.4 Пользователи также довольно часто создают новые учетные записи на
    Facebook. Предположим, вы решили использовать массив для хране-
    ния списка пользователей. Какими недостатками обладает массив для
    выполнения вставки? Допустим, вы используете бинарный поиск для
    нахождения учетных данных. Что произойдет при добавлении новых
    пользователей в массив?

    Ответ: При вставке в массив, приходится сдвигать вниз все остальные элементы. Выделенной памяти может не хватить.
    
    2.5 В действительности Facebook не использует ни массив, ни связанный
    список для хранения информации о пользователях. Рассмотрим ги-
    бридную структуру данных: массив связанных списков. Имеется мас-
    сив из 26 элементов. Каждый элемент содержит ссылку на связанный
    список. Например, первый элемент массива указывает на связанный
    список всех имен пользователей, начинающихся на букву «A». Второй
    элемент указывает на связанный список всех имен пользователей, на-
    чинающихся на букву «B», и т. д.
    Предположим, пользователь с именем «Adit B» регистрируется на
    Facebook и вы хотите добавить его в список. Вы обращаетесь к эле-
    менту 1 массива, находите связанный список элемента 1 и добавляете
    «Adit B» в конец списка. Теперь предположим, что зарегистрировать
    нужно пользователя «Zakhir H». Вы обращаетесь к элементу 26, ко-
    торый содержит связанный список всех имен, начинающихся с «Z»,
    и проверяете, присутствует ли «Zakhir H» в этом списке.
    Теперь сравните эту гибридную структуру данных с массивами и свя-
    занными списками. Будет ли она быстрее или медленнее каждой ис-
    ходной структуры при поиске и вставке? Приводить «O-большое» не
    нужно, просто выберите одно из двух: быстрее или медленнее.

    Ответ: Эта структура медленнее массива, так как поиск существующего имени осуществляется в Связанном списке, а он перебирает все подрят. 
    Эта структура быстрее Связанного списка, так как перебирать ей придется только имена начинающиеся с определенной буквы.