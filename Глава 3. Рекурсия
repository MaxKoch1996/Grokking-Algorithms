# Обратный отсчет, используя рекурсию. [O(n)]

# Создаем функцию "countdown", которая принимает один входной параметр:
# число "i", обозначающее число секунд для отсчета.

def countdown(i):
    # Создаем базовый случай.
    # Базовый случай в рекурсивной функции - это часть функции, в которой описывается
    # условие прекращения работы функции в целях предотвращения зацикливания.
    # Если секунд для отсчета больше не осталось, то мы выходим из функции. Это наш базовый случай.
    # Ключевое слово "return" выходит из функции и возвращает какое-либо значение.
    if i < 0:
        return
    # Создаем рекурсивный случай.
    # Рекурсивный случай в рекурсивной функции - это часть функции, в которой функция вызывает сама себя в целях выполнения какой-либо задачи.
    # Выводим число на экран при помощи функции "print()" и вызываем рекурсивно функцию "countdown" с параметром, уменьшенным на 1. Это наш рекурсивный случай.
    # Когда параметр функции "countdown" становится меньше 0, то сработает базовый случай и работа функции завершится.
    else:
        print(i)
        return countdown(i-1)
# Пытаемся вывести на экран отсчет от 6 до 0.
#countdown(6)

# Факториал числа
def factorial(num):
    if num <= 1:
        return 1
    else:
        return num * factorial(num-1)
# x = factorial(int(input('Enter number...\n')))
# print(x)
#При помощи цикла while, снимается лимит рекурсии
def some2(num):
    result = 1
    count = 1    
    while count <= num:
        result*=count        
        count+=1
    return result

#Возведение в степень
def degree(num, deg):
    if deg == 0:
        return 1
    else:
        return num * degree(num, deg-1)
#print(degree(5,5))

# Числа Фибоначчи
def fib(n):
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fib(n-1) + fib(n-2)

# Палиндром
def palindrome(s):
    if len(s) <= 1:
        return True
    if s[0] != s[-1]:
        return False
    return palindrome(s[1:-1])

# Обход каталога с помощью рекурсии
# Каталог
F = {
    'C:': {
        'Python39': ['python.exe', 'python.ini'],
        'Program Files':{
            'Java': ['Readme.txt', 'Welcome.html', 'java.exe'],
            'MATLAB': ['mathlab.bat', 'matlab.exe', 'mcc.bat']
        },
        'Windows': {
            'System32': ['acledit.dll', 'aclui.dll', 'zipfldr.dll']
        }
    }
}

# Функция для рекурсивного обхода
def get_files(path, depth = 0):
    for f in path:
        print(" "*depth, f)
        if type(path[f]) == dict:
            get_files(path[f], depth + 1)
        else:
            print(" " *(depth+1), " ".join(path[f]))
#get_files(F)
 