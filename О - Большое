# Основы анализа скорости алгоритмов
# О - Большое, служит для измерения в количестве операций, а не времени. Применяется для оценки сложности алгоритма. 
# Показывает как будет меняться производительность алгоритма с ростом входящих данных.
# О - Большое описывает худший возможный случай
# 2 Параметра будут увеличиваться: Время и Память

#Примеры О - Большого
    # Ниже перечислены пять разновидностей «O-большого», которые будут встречаться вам особенно часто, в порядке убывания скорости выполнения:
        # O(log n), или логарифмическое время. Пример: бинарный поиск.
        # O(n), или линейное время. Пример: простой поиск.
        # O(n * log n). Пример: эффективные алгоритмы сортировки (быстрая сортировка — но об этом в главе 4).
        # O(n2). Пример: медленные алгоритмы сортировки (сортировка выбором — см. главу 2).
        # O(n!). Пример: очень медленные алгоритмы (задача о коммивояжере, о ней будет рассказано в следующем разделе).

# Упражнения
    # Приведите время выполнения «O-большое» для каждого из следующих сценариев.
        # 1.3 Известна фамилия, нужно найти номер в телефонной книге.
        # 1.4 Известен номер, нужно найти фамилию в телефонной книге. (Подсказка: вам придется провести поиск по всей книге!)
        # 1.5 Нужно прочитать телефоны всех людей в телефонной книге.
        # 1.6 Нужно прочитать телефоны всех людей, фамилии которых начинаются с буквы «А». (Вопрос с подвохом! 
            # В нем задействованы концепции, которые более подробно рассматриваются в главе 4. Прочитайте ответ — скорее всего, он вас удивит!)

# Ответы
    # 1.3 O(log n)
    # 1.4 O(n)
    # 1.5
    # 1.6 

#Задача о коммивояжере
    # Коммивояжер должен объехать 5 городов. Он хочет побывать в каждом из 5 городов так, чтобы при этом проехать минимальное общее расстояние. Одно из возможных решений:
    # Нужно перебрать все возможные комбинации порядка объезда городов. Все расстояния суммируются, после чего выбирается путь с кратчайшим расстоянием. 
    # Для 5 городов можно создать 120 перестановок, поэтому решение задачи для 5 городов потребует 120 операций. Для 6 городов количество
    # операций увеличивается до 720 (существуют 720 возможных перестановок).
    # А для 7 городов потребуется уже 5040 операций!
    # В общем случае для вычисления результата при n элементах потребуется
    # n! (n-факториал) операций. А значит, время выполнения составит O(n!)
    # (такое время называется факториальным). При любом сколько-нибудь
    # серьезном размере списка количество операций будет просто огромным.
    # Скажем, если вы попытаетесь решить задачу для 100+ городов, сделать это
    # вовремя не удастся — Солнце погаснет раньше.
    # Какой ужасный алгоритм! Значит, коммивояжер должен найти другое
    # решение, верно? Но у него ничего не получится. Это одна из знаменитых
    # нерешенных задач в области теории вычислений. Для нее не существует
    # известного быстрого алгоритма, и ученые считают, что найти более эффективный алгоритм для этой задачи в принципе невозможно. В лучшем
    # случае для нее можно поискать приближенное решение; за подробностями
    # обращайтесь к главе 10.